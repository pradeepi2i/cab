{
    "sourceFile": "webpack.common.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1669964398924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1669964409151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,17 @@\n const CopyPlugin = require('copy-webpack-plugin');\n const ESLintPlugin = require('eslint-webpack-plugin');\n \n module.exports = {\n-  entry: './src//index.ts',\n+  entry: './src/ts/index.ts',\n   mode: 'development',\n   devtool: 'source-map',\n   optimization: {\n     usedExports: true\n   },\n   output: {\n     filename: '[name].[contenthash].js',\n-    path: path.resolve(__dirname, 'dist')\n+    path: path.resolve(__dirname, 'p')\n   },\n   module: {\n     rules: [\n       {\n"
                },
                {
                    "date": 1669964449477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     usedExports: true\n   },\n   output: {\n     filename: '[name].[contenthash].js',\n-    path: path.resolve(__dirname, 'p')\n+    path: path.resolve(__dirname, 'public')\n   },\n   module: {\n     rules: [\n       {\n@@ -69,8 +69,8 @@\n     }),\n     new ESLintPlugin({\n       extensions: ['.tsx', '.ts', '.js'],\n       exclude: 'node_modules',\n-      context: 'src'\n+      context: 'src/'\n     })\n   ]\n };\n"
                },
                {
                    "date": 1669964554911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-/* eslint-disable no-undef */\n+/* /* eslint-disable no-undef */\n /* eslint-disable @typescript-eslint/no-var-requires */\n const path = require('path');\n const HtmlWebpackPlugin = require('html-webpack-plugin');\n const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n@@ -69,8 +69,9 @@\n     }),\n     new ESLintPlugin({\n       extensions: ['.tsx', '.ts', '.js'],\n       exclude: 'node_modules',\n-      context: 'src/'\n+      context: 'src/ts'\n     })\n   ]\n };\n+ */\n\\ No newline at end of file\n"
                },
                {
                    "date": 1669964562434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,76 @@\n-/* /* eslint-disable no-undef */\n-/* eslint-disable @typescript-eslint/no-var-requires */\n-const path = require('path');\n-const HtmlWebpackPlugin = require('html-webpack-plugin');\n-const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n-const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\n-const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n-const CopyPlugin = require('copy-webpack-plugin');\n-const ESLintPlugin = require('eslint-webpack-plugin');\n+// /* eslint-disable no-undef */\n+// /* eslint-disable @typescript-eslint/no-var-requires */\n+// const path = require('path');\n+// const HtmlWebpackPlugin = require('html-webpack-plugin');\n+// const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n+// const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\n+// const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n+// const CopyPlugin = require('copy-webpack-plugin');\n+// const ESLintPlugin = require('eslint-webpack-plugin');\n \n-module.exports = {\n-  entry: './src/ts/index.ts',\n-  mode: 'development',\n-  devtool: 'source-map',\n-  optimization: {\n-    usedExports: true\n-  },\n-  output: {\n-    filename: '[name].[contenthash].js',\n-    path: path.resolve(__dirname, 'public')\n-  },\n-  module: {\n-    rules: [\n-      {\n-        test: /\\.tsx?$/,\n-        exclude: /node_modules/,\n-        use: {\n-          loader: 'ts-loader',\n-          options: {\n-            // disable type checker - we will use it in fork plugin\n-            transpileOnly: true\n-          }\n-        }\n-      },\n-      {\n-        test: /\\.(scss|css)$/,\n-        use: [\n-          process.env.NODE_ENV !== 'production'\n-            ? 'style-loader'\n-            : MiniCssExtractPlugin.loader,\n-          'css-loader',\n-          {\n-            loader: 'sass-loader',\n-            options: {\n-              sourceMap: true\n-            }\n-          }\n-        ]\n-      }\n-    ]\n-  },\n-  resolve: {\n-    extensions: ['.tsx', '.ts', '.js']\n-  },\n-  plugins: [\n-    new MiniCssExtractPlugin({\n-      // Options similar to the same options in webpackOptions.output\n-      // both options are optional\n-      filename: '[name].[contenthash].css',\n-      chunkFilename: '[id].css'\n-    }),\n-    new CleanWebpackPlugin(),\n-    new HtmlWebpackPlugin({\n-      template: './src/index.html'\n-    }),\n-    new ForkTsCheckerWebpackPlugin(),\n-    new CopyPlugin({\n-      patterns: [{ from: 'src/assets', to: 'assets' }]\n\\ No newline at end of file\n-    }),\n-    new ESLintPlugin({\n-      extensions: ['.tsx', '.ts', '.js'],\n-      exclude: 'node_modules',\n-      context: 'src/ts'\n-    })\n-  ]\n-};\n- */\n+// module.exports = {\n+//   entry: './src/ts/index.ts',\n+//   mode: 'development',\n+//   devtool: 'source-map',\n+//   optimization: {\n+//     usedExports: true\n+//   },\n+//   output: {\n+//     filename: '[name].[contenthash].js',\n+//     path: path.resolve(__dirname, 'public')\n+//   },\n+//   module: {\n+//     rules: [\n+//       {\n+//         test: /\\.tsx?$/,\n+//         exclude: /node_modules/,\n+//         use: {\n+//           loader: 'ts-loader',\n+//           options: {\n+//             // disable type checker - we will use it in fork plugin\n+//             transpileOnly: true\n+//           }\n+//         }\n+//       },\n+//       {\n+//         test: /\\.(scss|css)$/,\n+//         use: [\n+//           process.env.NODE_ENV !== 'production'\n+//             ? 'style-loader'\n+//             : MiniCssExtractPlugin.loader,\n+//           'css-loader',\n+//           {\n+//             loader: 'sass-loader',\n+//             options: {\n+//               sourceMap: true\n+//             }\n+//           }\n+//         ]\n+//       }\n+//     ]\n+//   },\n+//   resolve: {\n+//     extensions: ['.tsx', '.ts', '.js']\n+//   },\n+//   plugins: [\n+//     new MiniCssExtractPlugin({\n+//       // Options similar to the same options in webpackOptions.output\n+//       // both options are optional\n+//       filename: '[name].[contenthash].css',\n+//       chunkFilename: '[id].css'\n+//     }),\n+//     new CleanWebpackPlugin(),\n+//     new HtmlWebpackPlugin({\n+//       template: './src/index.html'\n+//     }),\n+//     new ForkTsCheckerWebpackPlugin(),\n+//     new CopyPlugin({\n+//       patterns: [{ from: 'src/assets', to: 'assets' }]\n+//     }),\n+//     new ESLintPlugin({\n+//       extensions: ['.tsx', '.ts', '.js'],\n+//       exclude: 'node_modules',\n+//       context: 'src/ts'\n+//     })\n+//   ]\n+// };\n"
                },
                {
                    "date": 1669964761814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,4 +73,67 @@\n //       context: 'src/ts'\n //     })\n //   ]\n // };\n+\n+const path = require('path');\n+const HtmlWebpackPlugin = require('html-webpack-plugin');\n+const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n+const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\n+const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n+const CopyPlugin = require('copy-webpack-plugin');\n+const ESLintPlugin = require('eslint-webpack-plugin');\n+\n+module.exports = {\n+    entry: './src/ts/index.ts',\n+    mode: 'development',\n+    devtool: 'source-map',\n+    module: {\n+        rules: [\n+            {\n+                test: /\\.tsx?$/,\n+                exclude: /node_modules/,\n+                use: {\n+                    loader: 'ts-loader',\n+                    options: {\n+                        transpileOnly: true\n+                    }\n+                }\n+            },\n+            {\n+                test: /\\.(png|jpe?g|gif)$/,\n+                use: [\n+                    'file-loader',\n+                    {\n+                        loader: 'image-webpack-loader'\n+                    },\n+                ],\n+            },\n+            {\n+                test: /\\.(scss|css)$/,\n+                use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']\n+            }\n+        ]\n+    },\n+    resolve: {\n+        extensions: ['.tsx', '.ts', '.js', '.jsx', '*']\n+    },\n+    plugins: [\n+        new MiniCssExtractPlugin({\n+            // Options similar to the same options in webpackOptions.output\n+            // both options are optional\n+            filename: '[name].[contenthash].css',\n+            chunkFilename: '[id].css'\n+        }),\n+        new CleanWebpackPlugin(),\n+        new HtmlWebpackPlugin({\n+            template: './src/html/index.html'\n+        }),\n+        \n+        new ForkTsCheckerWebpackPlugin(),\n+      \n+    ],\n+    output: {\n+        filename: '[name].[contenthash].js',\n+        path: path.resolve(__dirname, 'public')\n+    },\n+};\n"
                },
                {
                    "date": 1669964767599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,18 @@\n         new CleanWebpackPlugin(),\n         new HtmlWebpackPlugin({\n             template: './src/html/index.html'\n         }),\n-        \n         new ForkTsCheckerWebpackPlugin(),\n+//     new CopyPlugin({\n+//       patterns: [{ from: 'src/assets', to: 'assets' }]\n+//     }),\n+//     new ESLintPlugin({\n+//       extensions: ['.tsx', '.ts', '.js'],\n+//       exclude: 'node_modules',\n+//       context: 'src/ts'\n+//     })\n+        new ForkTsCheckerWebpackPlugin(),\n       \n     ],\n     output: {\n         filename: '[name].[contenthash].js',\n"
                },
                {
                    "date": 1669964774552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n //       extensions: ['.tsx', '.ts', '.js'],\n //       exclude: 'node_modules',\n //       context: 'src/ts'\n //     })\n-        new ForkTsCheckerWebpackPlugin(),\n+        \n       \n     ],\n     output: {\n         filename: '[name].[contenthash].js',\n"
                },
                {
                    "date": 1669964779859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,12 +132,12 @@\n //     new CopyPlugin({\n //       patterns: [{ from: 'src/assets', to: 'assets' }]\n //     }),\n //     new ESLintPlugin({\n-//       extensions: ['.tsx', '.ts', '.js'],\n-//       exclude: 'node_modules',\n-//       context: 'src/ts'\n-//     })\n+       extensions: ['.tsx', '.ts', '.js'],\n+       exclude: 'node_modules',\n+       context: 'src/ts'\n+     })\n         \n       \n     ],\n     output: {\n"
                },
                {
                    "date": 1669964785603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,65 +83,65 @@\n const CopyPlugin = require('copy-webpack-plugin');\n const ESLintPlugin = require('eslint-webpack-plugin');\n \n module.exports = {\n-    entry: './src/ts/index.ts',\n-    mode: 'development',\n-    devtool: 'source-map',\n-    module: {\n-        rules: [\n-            {\n-                test: /\\.tsx?$/,\n-                exclude: /node_modules/,\n-                use: {\n-                    loader: 'ts-loader',\n-                    options: {\n-                        transpileOnly: true\n-                    }\n-                }\n-            },\n-            {\n-                test: /\\.(png|jpe?g|gif)$/,\n-                use: [\n-                    'file-loader',\n-                    {\n-                        loader: 'image-webpack-loader'\n-                    },\n-                ],\n-            },\n-            {\n-                test: /\\.(scss|css)$/,\n-                use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']\n-            }\n-        ]\n-    },\n-    resolve: {\n-        extensions: ['.tsx', '.ts', '.js', '.jsx', '*']\n-    },\n-    plugins: [\n-        new MiniCssExtractPlugin({\n-            // Options similar to the same options in webpackOptions.output\n-            // both options are optional\n-            filename: '[name].[contenthash].css',\n-            chunkFilename: '[id].css'\n-        }),\n-        new CleanWebpackPlugin(),\n-        new HtmlWebpackPlugin({\n-            template: './src/html/index.html'\n-        }),\n-        new ForkTsCheckerWebpackPlugin(),\n-//     new CopyPlugin({\n-//       patterns: [{ from: 'src/assets', to: 'assets' }]\n-//     }),\n-//     new ESLintPlugin({\n-       extensions: ['.tsx', '.ts', '.js'],\n-       exclude: 'node_modules',\n-       context: 'src/ts'\n-     })\n-        \n-      \n-    ],\n-    output: {\n-        filename: '[name].[contenthash].js',\n-        path: path.resolve(__dirname, 'public')\n-    },\n+  entry: './src/ts/index.ts',\n+  mode: 'development',\n+  devtool: 'source-map',\n+  module: {\n+    rules: [\n+      {\n+        test: /\\.tsx?$/,\n+        exclude: /node_modules/,\n+        use: {\n+          loader: 'ts-loader',\n+          options: {\n+            transpileOnly: true\n+          }\n+        }\n+      },\n+      {\n+        test: /\\.(png|jpe?g|gif)$/,\n+        use: [\n+          'file-loader',\n+          {\n+            loader: 'image-webpack-loader'\n+          },\n+        ],\n+      },\n+      {\n+        test: /\\.(scss|css)$/,\n+        use: [MiniCssExtractPlugin.loader, 'css-loader', 'sass-loader']\n+      }\n+    ]\n+  },\n+  resolve: {\n+    extensions: ['.tsx', '.ts', '.js', '.jsx', '*']\n+  },\n+  plugins: [\n+    new MiniCssExtractPlugin({\n+      // Options similar to the same options in webpackOptions.output\n+      // both options are optional\n+      filename: '[name].[contenthash].css',\n+      chunkFilename: '[id].css'\n+    }),\n+    new CleanWebpackPlugin(),\n+    new HtmlWebpackPlugin({\n+      template: './src/html/index.html'\n+    }),\n+    new ForkTsCheckerWebpackPlugin(),\n+    new CopyPlugin({\n+      patterns: [{ from: 'src/assets', to: 'assets' }]\n+    }),\n+    new ESLintPlugin({\n+      extensions: ['.tsx', '.ts', '.js'],\n+      exclude: 'node_modules',\n+      context: 'src/ts'\n+    })\n+\n+\n+  ],\n+  output: {\n+    filename: '[name].[contenthash].js',\n+    path: path.resolve(__dirname, 'public')\n+  },\n };\n"
                }
            ],
            "date": 1669964398923,
            "name": "Commit-0",
            "content": "/* eslint-disable no-undef */\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CopyPlugin = require('copy-webpack-plugin');\nconst ESLintPlugin = require('eslint-webpack-plugin');\n\nmodule.exports = {\n  entry: './src//index.ts',\n  mode: 'development',\n  devtool: 'source-map',\n  optimization: {\n    usedExports: true\n  },\n  output: {\n    filename: '[name].[contenthash].js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'ts-loader',\n          options: {\n            // disable type checker - we will use it in fork plugin\n            transpileOnly: true\n          }\n        }\n      },\n      {\n        test: /\\.(scss|css)$/,\n        use: [\n          process.env.NODE_ENV !== 'production'\n            ? 'style-loader'\n            : MiniCssExtractPlugin.loader,\n          'css-loader',\n          {\n            loader: 'sass-loader',\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js']\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      // Options similar to the same options in webpackOptions.output\n      // both options are optional\n      filename: '[name].[contenthash].css',\n      chunkFilename: '[id].css'\n    }),\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    }),\n    new ForkTsCheckerWebpackPlugin(),\n    new CopyPlugin({\n      patterns: [{ from: 'src/assets', to: 'assets' }]\n    }),\n    new ESLintPlugin({\n      extensions: ['.tsx', '.ts', '.js'],\n      exclude: 'node_modules',\n      context: 'src'\n    })\n  ]\n};\n"
        }
    ]
}